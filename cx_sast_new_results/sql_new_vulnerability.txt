/*
	Finds new vulnerability counts by project for the specified time period e.g. weekly.

	The time period is specified using a StartDate and an EndDate from which the target and base scans will be identified.

	The Target scan is the most recent full, public, undeleted scan that occured AFTER the start date.
	The base scan is the most recent scan that occured BEFORE the start date. 

	In the case where only a single scan took place for project between the start and end date, then the most recent scan BEFORE the start date will be used as the base scan.

*/

-- Dates can be set statically like this:
DECLARE @EndDate Datetime   = '2022-01-16 00:00:00'
DECLARE @StartDate Datetime = '2026-03-14 21:45:00' 

-- and optionally overridden to be dynamic based on when the report is run
/*
SET @EndDate = GETDATE()                      -- Today
SET @StartDate = DATEADD(DD, -7, @EndDate)    -- 7 days ago
*/

Select ProjectName as 'Report Identifier'
    , QueryName as 'Finding Title'
	, ScanId as 'Most Recent Scan Id'
	, CweId as 'Finding Description'
	, Severity as 'Severity Level'
	, ResultState as 'Status'
	,  Count(*) as Count from (
	select Project.Name AS ProjectName,
	scan.id as ScanId,
	resultstate.Name AS ResultState, 
	query.Cwe as CweId,
	Severity = 
	CASE result.severity
	 WHEN '0' then 'Informational'
	 WHEN '1' then 'Low'
	 WHEN '2' then 'Medium'
	 WHEN '3' then 'High'
         WHEN '4' then 'Critical'
	END,
	result.QueryName AS QueryName
	from [CxDB].[dbo].[v_PathResultsWithLabelData] result -- using fixed view
	inner join CxEntities.ResultState  on result.State = resultstate.id
	inner join CxEntities.Scan  on result.ScanId = scan.Id
	inner join CxEntities.Project on Project.Id = Scan.ProjectId
	inner join [dbo].[Query]  on Query.QueryId = result.QueryId	
	where 1=1
	-- Filter on the most recent scan in the evaulation period for each project
	and scan.id in (select ts1.id from [dbo].[TaskScans] ts1
					  where ts1.ProjectId = [CxEntities].[Project].Id
					  and ts1.ScanRequestCompletedOn in (select max(ts2.ScanRequestCompletedOn) 
														 from [dbo].[TaskScans] ts2
														 where ts1.ProjectId = ts2.ProjectId 
														 and ts2.is_Incremental = 0 and ts2.is_deprecated = 0 and ts2.IsPublic = 1 and ts2.ScanRequestCompletedOn is not null
														 and ts2.ScanRequestCompletedOn between @StartDate and @EndDate
														)
					 )
	-- Filter on results that occur in the most recent scan in the evaluation period for each project
	and similarityid in (select similarityid 
	                     from [dbo].[v_PathResultsWithLabelData] 
						 where resultid in  (select ts1.id from [dbo].[TaskScans] ts1
											  where ts1.ProjectId = [CxEntities].[Project].Id
											  and ts1.ScanRequestCompletedOn in (select max(ts2.ScanRequestCompletedOn) 
																				 from [dbo].[TaskScans] ts2
																				 where ts1.ProjectId = ts2.ProjectId 
																				 and ts2.is_Incremental = 0 and ts2.is_deprecated = 0 and ts2.IsPublic = 1 and ts2.ScanRequestCompletedOn is not null
																				 and ts2.ScanRequestCompletedOn between @StartDate and @EndDate
																				)
											 )
						 )
	-- Filter *out* results in the FIRST scan in the evaulation period
	and similarityid NOT in (select similarityid 
							 from [dbo].[v_PathResultsWithLabelData] 
							 where resultid in  (select ts1.id from [dbo].[TaskScans] ts1
												  where ts1.ProjectId = [CxEntities].[Project].Id
												  and ts1.ScanRequestCompletedOn in  (select max(ts2.ScanRequestCompletedOn) 
																					 from [dbo].[TaskScans] ts2
																					 where ts1.ProjectId = ts2.ProjectId 
																					 and ts2.is_Incremental = 0 and ts2.is_deprecated = 0 and ts2.IsPublic = 1 and ts2.ScanRequestCompletedOn is not null
																					 and ts2.ScanRequestCompletedOn <= @StartDate
																					)
												 )
							 and resultid != scan.id  -- avoid filtering results when there is only 1 scan in the eval period
							 )

 ) a
 where Severity in ('Informational', 'Low', 'Medium', 'High')  -- severity filters can be updated
 and ResultState in ('Not Exploitable', 'To Verify', 'Confirmed', 'Urgent', 'Proposed Not Exploitable') --- not in ('Not Exploitable')                    -- result state filters can be updated ('Not Exploitable', 'To Verify', 'Confirmed', 'Urgent', 'Proposed Not Exploitable')
group by ProjectName, ScanId, CweId, ResultState, Severity, QueryName
order by ProjectName, ResultState, Severity desc
